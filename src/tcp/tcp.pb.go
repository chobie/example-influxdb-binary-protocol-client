// Code generated by protoc-gen-go.
// source: src/tcp/tcp.proto
// DO NOT EDIT!

/*
Package tcp is a generated protocol buffer package.

It is generated from these files:
	src/tcp/tcp.proto

It has these top-level messages:
	Account
	Greeting
	Command
*/
package tcp

import proto "code.google.com/p/goprotobuf/proto"
import math "math"
import protocol "protocol"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = math.Inf

type Account_AccountType int32

const (
	Account_CLUSTER_ADMIN Account_AccountType = 1
	Account_DB_USER       Account_AccountType = 2
)

var Account_AccountType_name = map[int32]string{
	1: "CLUSTER_ADMIN",
	2: "DB_USER",
}
var Account_AccountType_value = map[string]int32{
	"CLUSTER_ADMIN": 1,
	"DB_USER":       2,
}

func (x Account_AccountType) Enum() *Account_AccountType {
	p := new(Account_AccountType)
	*p = x
	return p
}
func (x Account_AccountType) String() string {
	return proto.EnumName(Account_AccountType_name, int32(x))
}
func (x *Account_AccountType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Account_AccountType_value, data, "Account_AccountType")
	if err != nil {
		return err
	}
	*x = Account_AccountType(value)
	return nil
}

type Greeting_GreetingType int32

const (
	Greeting_HELO  Greeting_GreetingType = 1
	Greeting_RHELO Greeting_GreetingType = 2
	Greeting_ACK   Greeting_GreetingType = 3
	Greeting_DENY  Greeting_GreetingType = 4
)

var Greeting_GreetingType_name = map[int32]string{
	1: "HELO",
	2: "RHELO",
	3: "ACK",
	4: "DENY",
}
var Greeting_GreetingType_value = map[string]int32{
	"HELO":  1,
	"RHELO": 2,
	"ACK":   3,
	"DENY":  4,
}

func (x Greeting_GreetingType) Enum() *Greeting_GreetingType {
	p := new(Greeting_GreetingType)
	*p = x
	return p
}
func (x Greeting_GreetingType) String() string {
	return proto.EnumName(Greeting_GreetingType_name, int32(x))
}
func (x *Greeting_GreetingType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Greeting_GreetingType_value, data, "Greeting_GreetingType")
	if err != nil {
		return err
	}
	*x = Greeting_GreetingType(value)
	return nil
}

type Greeting_Configuration_AuthenticationMethod int32

const (
	Greeting_Configuration_PLAIN     Greeting_Configuration_AuthenticationMethod = 0
	Greeting_Configuration_HASH_MASK Greeting_Configuration_AuthenticationMethod = 1
)

var Greeting_Configuration_AuthenticationMethod_name = map[int32]string{
	0: "PLAIN",
	1: "HASH_MASK",
}
var Greeting_Configuration_AuthenticationMethod_value = map[string]int32{
	"PLAIN":     0,
	"HASH_MASK": 1,
}

func (x Greeting_Configuration_AuthenticationMethod) Enum() *Greeting_Configuration_AuthenticationMethod {
	p := new(Greeting_Configuration_AuthenticationMethod)
	*p = x
	return p
}
func (x Greeting_Configuration_AuthenticationMethod) String() string {
	return proto.EnumName(Greeting_Configuration_AuthenticationMethod_name, int32(x))
}
func (x *Greeting_Configuration_AuthenticationMethod) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Greeting_Configuration_AuthenticationMethod_value, data, "Greeting_Configuration_AuthenticationMethod")
	if err != nil {
		return err
	}
	*x = Greeting_Configuration_AuthenticationMethod(value)
	return nil
}

type Greeting_Configuration_CompressType int32

const (
	Greeting_Configuration_NONE   Greeting_Configuration_CompressType = 0
	Greeting_Configuration_SNAPPY Greeting_Configuration_CompressType = 1
	Greeting_Configuration_GZIP   Greeting_Configuration_CompressType = 2
)

var Greeting_Configuration_CompressType_name = map[int32]string{
	0: "NONE",
	1: "SNAPPY",
	2: "GZIP",
}
var Greeting_Configuration_CompressType_value = map[string]int32{
	"NONE":   0,
	"SNAPPY": 1,
	"GZIP":   2,
}

func (x Greeting_Configuration_CompressType) Enum() *Greeting_Configuration_CompressType {
	p := new(Greeting_Configuration_CompressType)
	*p = x
	return p
}
func (x Greeting_Configuration_CompressType) String() string {
	return proto.EnumName(Greeting_Configuration_CompressType_name, int32(x))
}
func (x *Greeting_Configuration_CompressType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Greeting_Configuration_CompressType_value, data, "Greeting_Configuration_CompressType")
	if err != nil {
		return err
	}
	*x = Greeting_Configuration_CompressType(value)
	return nil
}

type Command_CommandType int32

const (
	Command_WRITESERIES    Command_CommandType = 1
	Command_CHANGEDATABASE Command_CommandType = 2
	Command_QUERY          Command_CommandType = 3
	Command_CREATEDATABASE Command_CommandType = 4
	Command_DROPDATABASE   Command_CommandType = 5
	Command_LISTDATABASE   Command_CommandType = 6
	Command_CLOSE          Command_CommandType = 7
	Command_PING           Command_CommandType = 8
	Command_RESET          Command_CommandType = 9
	Command_UNKNOWN        Command_CommandType = 999
)

var Command_CommandType_name = map[int32]string{
	1:   "WRITESERIES",
	2:   "CHANGEDATABASE",
	3:   "QUERY",
	4:   "CREATEDATABASE",
	5:   "DROPDATABASE",
	6:   "LISTDATABASE",
	7:   "CLOSE",
	8:   "PING",
	9:   "RESET",
	999: "UNKNOWN",
}
var Command_CommandType_value = map[string]int32{
	"WRITESERIES":    1,
	"CHANGEDATABASE": 2,
	"QUERY":          3,
	"CREATEDATABASE": 4,
	"DROPDATABASE":   5,
	"LISTDATABASE":   6,
	"CLOSE":          7,
	"PING":           8,
	"RESET":          9,
	"UNKNOWN":        999,
}

func (x Command_CommandType) Enum() *Command_CommandType {
	p := new(Command_CommandType)
	*p = x
	return p
}
func (x Command_CommandType) String() string {
	return proto.EnumName(Command_CommandType_name, int32(x))
}
func (x *Command_CommandType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Command_CommandType_value, data, "Command_CommandType")
	if err != nil {
		return err
	}
	*x = Command_CommandType(value)
	return nil
}

// this means the message comes from server.
type Command_CommandResult int32

const (
	Command_OK       Command_CommandResult = 1
	Command_SOFTFAIL Command_CommandResult = 2
	Command_FAIL     Command_CommandResult = 3
)

var Command_CommandResult_name = map[int32]string{
	1: "OK",
	2: "SOFTFAIL",
	3: "FAIL",
}
var Command_CommandResult_value = map[string]int32{
	"OK":       1,
	"SOFTFAIL": 2,
	"FAIL":     3,
}

func (x Command_CommandResult) Enum() *Command_CommandResult {
	p := new(Command_CommandResult)
	*p = x
	return p
}
func (x Command_CommandResult) String() string {
	return proto.EnumName(Command_CommandResult_name, int32(x))
}
func (x *Command_CommandResult) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Command_CommandResult_value, data, "Command_CommandResult")
	if err != nil {
		return err
	}
	*x = Command_CommandResult(value)
	return nil
}

type Account struct {
	Name             []byte               `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Password         []byte               `protobuf:"bytes,2,opt,name=password" json:"password,omitempty"`
	Type             *Account_AccountType `protobuf:"varint,3,opt,name=type,enum=tcp.Account_AccountType" json:"type,omitempty"`
	XXX_unrecognized []byte               `json:"-"`
}

func (m *Account) Reset()         { *m = Account{} }
func (m *Account) String() string { return proto.CompactTextString(m) }
func (*Account) ProtoMessage()    {}

func (m *Account) GetName() []byte {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *Account) GetPassword() []byte {
	if m != nil {
		return m.Password
	}
	return nil
}

func (m *Account) GetType() Account_AccountType {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return Account_CLUSTER_ADMIN
}

type Greeting struct {
	Sequence         *uint32                 `protobuf:"varint,1,opt,name=sequence" json:"sequence,omitempty"`
	Type             *Greeting_GreetingType  `protobuf:"varint,2,opt,name=type,enum=tcp.Greeting_GreetingType" json:"type,omitempty"`
	ProtocolVersion  *int32                  `protobuf:"varint,3,opt,name=protocol_version" json:"protocol_version,omitempty"`
	Agent            []byte                  `protobuf:"bytes,4,opt,name=agent" json:"agent,omitempty"`
	Account          *Account                `protobuf:"bytes,5,opt,name=account" json:"account,omitempty"`
	Database         []byte                  `protobuf:"bytes,6,opt,name=database" json:"database,omitempty"`
	Config           *Greeting_Configuration `protobuf:"bytes,7,opt,name=config" json:"config,omitempty"`
	Reason           []byte                  `protobuf:"bytes,999,opt,name=reason" json:"reason,omitempty"`
	XXX_unrecognized []byte                  `json:"-"`
}

func (m *Greeting) Reset()         { *m = Greeting{} }
func (m *Greeting) String() string { return proto.CompactTextString(m) }
func (*Greeting) ProtoMessage()    {}

func (m *Greeting) GetSequence() uint32 {
	if m != nil && m.Sequence != nil {
		return *m.Sequence
	}
	return 0
}

func (m *Greeting) GetType() Greeting_GreetingType {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return Greeting_HELO
}

func (m *Greeting) GetProtocolVersion() int32 {
	if m != nil && m.ProtocolVersion != nil {
		return *m.ProtocolVersion
	}
	return 0
}

func (m *Greeting) GetAgent() []byte {
	if m != nil {
		return m.Agent
	}
	return nil
}

func (m *Greeting) GetAccount() *Account {
	if m != nil {
		return m.Account
	}
	return nil
}

func (m *Greeting) GetDatabase() []byte {
	if m != nil {
		return m.Database
	}
	return nil
}

func (m *Greeting) GetConfig() *Greeting_Configuration {
	if m != nil {
		return m.Config
	}
	return nil
}

func (m *Greeting) GetReason() []byte {
	if m != nil {
		return m.Reason
	}
	return nil
}

type Greeting_Configuration struct {
	CompressType         *Greeting_Configuration_CompressType         `protobuf:"varint,1,opt,name=compress_type,enum=tcp.Greeting_Configuration_CompressType" json:"compress_type,omitempty"`
	AuthenticationMethod *Greeting_Configuration_AuthenticationMethod `protobuf:"varint,2,opt,name=authentication_method,enum=tcp.Greeting_Configuration_AuthenticationMethod" json:"authentication_method,omitempty"`
	XXX_unrecognized     []byte                                       `json:"-"`
}

func (m *Greeting_Configuration) Reset()         { *m = Greeting_Configuration{} }
func (m *Greeting_Configuration) String() string { return proto.CompactTextString(m) }
func (*Greeting_Configuration) ProtoMessage()    {}

func (m *Greeting_Configuration) GetCompressType() Greeting_Configuration_CompressType {
	if m != nil && m.CompressType != nil {
		return *m.CompressType
	}
	return Greeting_Configuration_NONE
}

func (m *Greeting_Configuration) GetAuthenticationMethod() Greeting_Configuration_AuthenticationMethod {
	if m != nil && m.AuthenticationMethod != nil {
		return *m.AuthenticationMethod
	}
	return Greeting_Configuration_PLAIN
}

type Command struct {
	// this makes easy to debug.
	Sequence *uint32                `protobuf:"varint,1,opt,name=sequence" json:"sequence,omitempty"`
	Type     *Command_CommandType   `protobuf:"varint,2,opt,name=type,enum=tcp.Command_CommandType" json:"type,omitempty"`
	Result   *Command_CommandResult `protobuf:"varint,3,opt,name=result,enum=tcp.Command_CommandResult" json:"result,omitempty"`
	// response has more messages. please read more.
	Continue *bool             `protobuf:"varint,4,opt,name=continue" json:"continue,omitempty"`
	Database *Command_Database `protobuf:"bytes,5,opt,name=database" json:"database,omitempty"`
	Series   *Command_Series   `protobuf:"bytes,6,opt,name=series" json:"series,omitempty"`
	Query    *Command_Query    `protobuf:"bytes,7,opt,name=query" json:"query,omitempty"`
	// put error message here.
	Reason           []byte `protobuf:"bytes,999,opt,name=reason" json:"reason,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *Command) Reset()         { *m = Command{} }
func (m *Command) String() string { return proto.CompactTextString(m) }
func (*Command) ProtoMessage()    {}

func (m *Command) GetSequence() uint32 {
	if m != nil && m.Sequence != nil {
		return *m.Sequence
	}
	return 0
}

func (m *Command) GetType() Command_CommandType {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return Command_WRITESERIES
}

func (m *Command) GetResult() Command_CommandResult {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return Command_OK
}

func (m *Command) GetContinue() bool {
	if m != nil && m.Continue != nil {
		return *m.Continue
	}
	return false
}

func (m *Command) GetDatabase() *Command_Database {
	if m != nil {
		return m.Database
	}
	return nil
}

func (m *Command) GetSeries() *Command_Series {
	if m != nil {
		return m.Series
	}
	return nil
}

func (m *Command) GetQuery() *Command_Query {
	if m != nil {
		return m.Query
	}
	return nil
}

func (m *Command) GetReason() []byte {
	if m != nil {
		return m.Reason
	}
	return nil
}

// [Conbinations]
//   CHANGEDATABASE, CREATEDATABASE, DROPDATABASE, LISTDATABASE
type Command_Database struct {
	// CHANGEDATABASE only accepts one name.
	Name             []string `protobuf:"bytes,1,rep,name=name" json:"name,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *Command_Database) Reset()         { *m = Command_Database{} }
func (m *Command_Database) String() string { return proto.CompactTextString(m) }
func (*Command_Database) ProtoMessage()    {}

func (m *Command_Database) GetName() []string {
	if m != nil {
		return m.Name
	}
	return nil
}

// [Combinations]
//   WRITESERIES
type Command_Series struct {
	Series           []*protocol.Series `protobuf:"bytes,1,rep,name=series" json:"series,omitempty"`
	TimePrecision    []byte             `protobuf:"bytes,2,opt,name=time_precision,def=ms" json:"time_precision,omitempty"`
	XXX_unrecognized []byte             `json:"-"`
}

func (m *Command_Series) Reset()         { *m = Command_Series{} }
func (m *Command_Series) String() string { return proto.CompactTextString(m) }
func (*Command_Series) ProtoMessage()    {}

var Default_Command_Series_TimePrecision []byte = []byte("ms")

func (m *Command_Series) GetSeries() []*protocol.Series {
	if m != nil {
		return m.Series
	}
	return nil
}

func (m *Command_Series) GetTimePrecision() []byte {
	if m != nil && m.TimePrecision != nil {
		return m.TimePrecision
	}
	return append([]byte(nil), Default_Command_Series_TimePrecision...)
}

// [Combinations]
//   QUERY
type Command_Query struct {
	Query []byte `protobuf:"bytes,1,opt,name=query" json:"query,omitempty"`
	// set from serer
	Count            *int64          `protobuf:"varint,2,opt,name=count" json:"count,omitempty"`
	Series           *Command_Series `protobuf:"bytes,3,opt,name=series" json:"series,omitempty"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *Command_Query) Reset()         { *m = Command_Query{} }
func (m *Command_Query) String() string { return proto.CompactTextString(m) }
func (*Command_Query) ProtoMessage()    {}

func (m *Command_Query) GetQuery() []byte {
	if m != nil {
		return m.Query
	}
	return nil
}

func (m *Command_Query) GetCount() int64 {
	if m != nil && m.Count != nil {
		return *m.Count
	}
	return 0
}

func (m *Command_Query) GetSeries() *Command_Series {
	if m != nil {
		return m.Series
	}
	return nil
}

func init() {
	proto.RegisterEnum("tcp.Account_AccountType", Account_AccountType_name, Account_AccountType_value)
	proto.RegisterEnum("tcp.Greeting_GreetingType", Greeting_GreetingType_name, Greeting_GreetingType_value)
	proto.RegisterEnum("tcp.Greeting_Configuration_AuthenticationMethod", Greeting_Configuration_AuthenticationMethod_name, Greeting_Configuration_AuthenticationMethod_value)
	proto.RegisterEnum("tcp.Greeting_Configuration_CompressType", Greeting_Configuration_CompressType_name, Greeting_Configuration_CompressType_value)
	proto.RegisterEnum("tcp.Command_CommandType", Command_CommandType_name, Command_CommandType_value)
	proto.RegisterEnum("tcp.Command_CommandResult", Command_CommandResult_name, Command_CommandResult_value)
}
